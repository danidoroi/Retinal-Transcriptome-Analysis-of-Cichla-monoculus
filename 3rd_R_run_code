### to align the reads to the reference genome with tophat

#### LOCATION OF TRIMMED FILES IN MY DEEPTHOUGHT2 REPOSITORY
### /lustre/descoba2/Cichla/Trimm

####
####

#### INDEX OF THE REFERENCE GENOME

#### Tilapia genome location ##  cd /lustre/cichlid-labs/reference_assemblies/O_niloticus_UMD1/O_niloticus_UMD1.fa
#### 

#******************************** R CODE ******************************* 
-------------------------------------------------------------------------------------------------------------------------------------
### INDEX THE REFERENCE GENOME
library(systemPipeR)
args <- systemArgs(sysma="./param/tophat.param", mytargets="targetsPE.txt")
moduleload(modules(args)) # Skip if a module system is not available
system("bowtie2-build O_niloticus_UMD1.fa O_niloticus_UMD1.fa")

### the library systempiper provides utilities for buildingin end-to-end analysis workflows with automated report generation
### for next generation sequence applications.
### note that the code above is R code but after "system(" is unix code specifying to use bowtie on the tilapia genome
### systemargs constructs SYSargs S4 class objects from two simple tabilar files: a targets files and a param file defines the parameter
### of the command-line software. 
---------------------------------------------------------------------------------------------------------------------------------------


#*************************************************

-----------------------------------------------------------------------------------------------------------------------------------
### ALIGN ALL FASTQ FILES WITH BOWTIE2/TOPHAT2 

bampaths <- runcCommandline(args=args)
bamppath
---------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------
### ALIGNMENT SUMMARY
## generate table of read and alignment counts for all samples

read_statsDF <- alignStats(args)
write.table(read_statsDF, "results/alignStats.xls", row.names=FALSE, quote=FALSE, sep="\t"

### to show the the sample alignment stat file provided by the systempiper package.

read.table(system.file("extdata", "alignStats.xls", package="systemPipeR"), header=TRUE)[1:7,]
---------------------------------------------------------------------------------------------------------------------------------------




---------------------------------------------------------------------------------------------------------------------------------------
###****** this can be apart, is not necessary right now?*******
##### CREATE SYMBOLIC LINKS FOR VIEWING BAM FILES IN IGV

symLink2bam(sysargs=args, htmldir=c("~/.html/", "somedir/"),
urlbase="http://myserver.edu/~username/", urlfile="IGVurl.txt"
---------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------
### READ COUNTING

### counting the reads per feature, for this, first we need to store all the GFF/GTF range annotations in a database, 
### TranscriptDb which then makes many operations more robust and convenient
### create txdb
### will we have a gff file form the rpevious step?

library(GenomicFeatures)
txdb <- makeTxDbFromGFF(file="data/tair10.gff", format="gff", dataSource="TAIR", organism="Oreochromis_niloticus"
saveDb(txdb, file="O_niloticus_UMD1.sqlite")

txdb <- loadDb("O_niloticus_UMD1.sqlite")
eByg <- exonsBy(txdb, by="gene")
eByg[1:2]
---------------------------------------------------------------------------------------------------------------------------------------




---------------------------------------------------------------------------------------------------------------------------------------
### READ COUNTING WITH SUMMARIZEOVERLAPS

txdb <- loadDb("O_niloticus_UMD1.sqlite")
eByg <- exonsBy(txdb, by=c("gene"))
bfl <- BamFileList(outpaths(args), yieldSize=50000, index=character())
counteByg <- summarizeOverlaps(eByg, bfl, mode="Union", ignore.strand=TRUE, inter.feature=FALSE, singleEnd=FALSE) # Note: for strand-specific RNA-Seq set 'ignore.strand=FALSE' and for PE data set 'singleEnd=FALSE'
countDFeByg <- assays(counteByg)$counts
countDFeByg[1:4,1:18]

write.table(countDFeByg, "results/countDFeByg.xls", col.names=NA, quote=FALSE, sep="\t") # change to TRUE
---------------------------------------------------------------------------------------------------------------------------------------




---------------------------------------------------------------------------------------------------------------------------------------
##### SIMPLE RPKM NORMALIZATION

rpkmDFeByg <- apply(countDFeByg, 2, function(x) returnRPKM(counts=x, ranges=eByg)) # change to TRUE
write.table(rpkmDFeByg, "results/rpkmDFeByg.xls", col.names=NA, quote=FALSE, sep="\t")
rpkmDFeByg[1:4,1:8]
---------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------
#### ANALYSIS OF DIFFERENTIALLY EXPRESSED GENES (DEGs)
#### DEG analysis using deseq
## in order to analyze differential gene expression we should use the package DESEQ2 from bioconductor 
## to install the package. This basically will analyze the transcriptome data and the final product would
## be a differential expression analysis of the samples used in your experiments.
## First I have to download the "DESeq2 package from bioconductor

http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")


countDF <- read.table("./results/countDFeByg.xls")
cmp <- readComp(args, format="matrix", delim="-")
degseqDF <- run_DESeq2(countDF=countDF, targets=targetsin(args), cmp=cmp[[1]], independent=FALSE)
write.table(degseqDF, "./results/DESeq2comp.xls", quote=FALSE, sep="\t", col.names = NA)

DEG_list2 <- filterDEGs(degDF=degseqDF, filter=c(Fold=2, FDR=20))
---------------------------------------------------------------------------------------------------------------------------------------




---------------------------------------------------------------------------------------------------------------------------------------

#### GENE WISE CLUSTERING *********HEATMAP**********

library(pheatmap)
geneids <- unique(as.character(unlist(DEG_list[[1]])))
y <- assay(rlog(dds))[geneids, ]
pdf("./results/heatmap_rlog.pdf")
pheatmap(y, scale="row", clustering_distance_rows="correlation", clustering_distance_cols="correlation")
dev.off()

pheatmap(y, scale="row", clustering_distance_rows="correlation", clustering_distance_cols="correlation")
---------------------------------------------------------------------------------------------------------------------------------------
