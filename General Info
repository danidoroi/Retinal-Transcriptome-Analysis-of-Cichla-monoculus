### We have 7 transcriptome 
## CM1, CM4, CM16, CM17, CM27, CM28, CM29
## CM1, CM4, CM16 & CM17 are samples from clear waters of Lake Gatun
## CM27, CM28, CM29 are samples from murky waters of Lake Gatun

## in order to analyze differential gene expression we should use the package DESEQ2 from bioconductor 
## to install the package. This basically will analyze the transcriptome data and the final product would
## be a differential expression analysis of the samples used in your experiments.
## First I have to download the "DESeq2 package from bioconductor

http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")


### Now... I have already analyzed the fq files, we have checked que quality of the reads with Fastqc and we have altrady trimmed
### the reads with trimommatic in order to have higher quality. We have forward and reverse (paired-ends reads) files from each of 
### the seven samples.

### We then want to align these reads files to a reference genome but first we have to specify the "targets" file
### which is the file that contains all the necessary information about the reads files like names, etc...
### the following matrix is an example of a target file

### first you load the target file from a .txt document
targetsPE.txt <- read.table("/Users/danido/Documents/709_R_Ecology/Project/target_file.txt", header=F)

### then you specify targetspath which is the set up for targets file specified by bioconductor
targetspath <- system.file("extdata", "targetsPE.txt", package="systemPipeR")

### reads the table and creates a data.frame from that specifying the dimensions of the table/
read.delim(targetspath, comment.char = "#")[1:7,1:4]

### is basically something like this, here in the first two columns you have the names of the forward and reverse reads files
### then you have the 3 and 4 column to specify the the name of the sample and the treatment in this case named "factor"
### you need the 3 and 4 column so you can do pairwise comparissons later

File_Name1	File_Name2	Sample_Name	Factor
1_CM1_S33_L006_R1_001_trim_R1.fq.gz	1_CM1_S33_L006_R2_001_trim_R2.fq.gz	CM1	CL
2_CM4_S34_L006_R1_001_trim_R1.fq.gz	2_CM4_S34_L006_R2_001_trim_R2.fq.gz	CM4	CL
3_CM27_S35_L006_R1_001_trim_R1.fq.gz	3_CM27_S35_L006_R2_001_trim_R2.fq.gz	CM27	MU
4_CM28_S36_L006_R1_001_trim_R1.fq.gz	4_CM28_S36_L006_R2_001_trim_R2.fq.gz	CM28	MU
5_CM29_S37_L006_R1_001_trim_R1.fq.gz	5_CM29_S37_L006_R2_001_trim_R2.fq.gz	CM29	MU
6_CM16_S38_L006_R1_001_trim_R1.fq.gz	6_CM16_S38_L006_R2_001_trim_R2.fq.gz	CM16	CL
7_CM17_S39_L006_R1_001_trim_R1.fq.gz	7_CM17_S39_L006_R2_001_trim_R2.fq.gz	CM17	CL

### to run R in the command line in deepthought2, it then recognizes R code as imput
### the .sh file should start like this
###

#!/bin/bash
#SBATCH --ntasks=20
#SBATCH -N 1
#SBATCH -t 4000:00
#SBATCH --mem=127000

### to go to my directory:
cd /lustre/descoba2/Cichla/Scripts


####
####
cd /lustre/cichlid-labs/example_submission_scripts

/lustre/cichlid-labs/sw/R-3.1.0/bin/Rscript --restore example.R

### 
### to align the reads to the reference genome with tophat

#### LOCATION OF TRIMMED FILES IN MY DEEPTHOUGHT2 REPOSITORY
### /lustre/descoba2/Cichla/Trimm

####
####


#### INDEX OF THE REFERENCE GENOME

#### Tilapia genome location ##  cd /lustre/cichlid-labs/reference_assemblies/O_niloticus_UMD1/O_niloticus_UMD1.fa
#### 

library(systemPipeR)
args <- systemArgs(sysma="./param/tophat.param", mytargets="targetsPE.txt")
moduleload(modules(args)) # Skip if a module system is not available
system("bowtie2-build O_niloticus_UMD1.fa O_niloticus_UMD1.fa")

### the library systempiper provides utilities for buildingin end-to-end analysis workflows with automated report generation
### for next generation sequence applications.
### note that the code above is R code but after "system(" is unix code specifying to use bowtie on the tilapia genome
### systemargs constructs SYSargs S4 class objects from two simple tabilar files: a targets files and a param file defines the parameter
### of the command-line software. 

### ALIGN ALL FASTQ FILES WITH BOWTIE2/TOPHAT2 

bampaths <- runcCommandline(args=args)
bamppath

### ALIGNMENT SUMMARY

## generate table of read and alignment counts for all samples

read_statsDF <- alignStats(args)
write.table(read_statsDF, "results/alignStats.xls", row.names=FALSE, quote=FALSE, sep="\t"

### to show the the sample alignment stat file provided by the systempiper package.
read.table(system.file("extdata", "alignStats.xls", package="systemPipeR"), header=TRUE)[1:7,]

##### CREATE SYMBOLIC LINKS FOR VIEWING BAM FILES IN IGV

symLink2bam(sysargs=args, htmldir=c("~/.html/", "somedir/"),
urlbase="http://myserver.edu/~username/", urlfile="IGVurl.txt"

### READ COUNTING

## counting the reads per feature, for this, first we need to store all the GFF/GTF range annotations in a database, 
### TranscriptDb which then makes many operations more robust and convenient
### create txdb


library(GenomicFeatures)
txdb <- makeTxDbFromGFF(file="data/tair10.gff", format="gff", dataSource="TAIR", organism="Oreochromis_niloticus"

